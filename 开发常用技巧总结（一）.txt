1.IP地址变量化
相信大家在连接数据库的时候是这样写的：
	jdbc:mysql://127.0.0.1:3306/test
这是连接本地MySql数据库的字符串，这句话看起来没有问题，但是大多数企业项目会把数据库独立出来，使用数据库一体机或远程数据库，
这时候就需要修改上面的IP了，如果项目少这样写没什么问题，但是如果项目多了，岂不是每个项目都要去修改，这样显得非常不智能，所以解决方案来了：

使用hosts文件使IP地址变量化
	首先介绍一下hosts文件，它的作用就是将一些网址域名与其对应的IP地址建立一个关联，相当于本地的DNS域名解析器，当用户访问一个网址时，系统会首先从hosts文件中寻找对应的IP地址，
一旦找到，系统会立即访问对应的IP，如果没有找到，则系统再会将网址提交DNS域名解析服务器进行IP地址的解析。Windows中hosts文件位于C:\Windows\System32\drivers\etc\hosts，
Linux中位于/etc/hosts。
	现在我们把数据库连接字符串改成这样子：
	jdbc:mysql://mydb:3306/test
	与之前的不同之处在于，将127.0.0.1的IP地址改成了变量名mydb，接着我们来修改hosts文件，打开hosts文件其实你可以看到，平时我们使用的localhost其实是默认解析到IP127.0.0.1上的，
我们可以在文件最下面添加这样一行配置：
    127.0.0.1 mydb
	大功告成，运行项目你会发现一切正常，这就是将IP地址变量化的方法，如果之后公司要求将数据库迁移到其它地方，只需修改一下服务器的hosts文件即可，服务器上面所有的项目就能正常连接数据库了，
是不是很方便呢。

2、自定义MAVEN依赖
	有时候一个项目可能依赖很多个项目，在部署这个项目时要把所有的依赖项目打成jar包，再把这些jar转移到本地仓库，并在在项目的POM.xml中声明依赖关系。如果之后修改了某个依赖项目，又需要重新
打包，再覆盖本地仓库里的旧jar包，假如同时修改了多个依赖项目，以上步骤又要翻倍。很不方便。这里提供两种解决思路：
	（一）自定义一个依赖项目
	把所有的依赖项目添加到一个命名为“project-monitor”的项目里（可以用2方法），也可以在这个项目里可以用占位符的形式配置多种数据源。最后把这一个项目作为依赖加入到其它项目中。
	（二）添加指定项目依赖
	直接把依赖项目加入到当前项目中，避免修改后多次打jar包。不过这里有一个问题，如果依赖的项目又依赖了别的jar包，当前项目编译时没有问题，但是如果部署的话可能出现问题。比如两个项目中都
用了某个包，但是版本号冲突。又或者依赖项目的依赖包当前项目中没有。解决办法是可以在Deployment Assembly设置选项中把依赖加入进来，会自动把依赖项目的依赖包也加入到部署环境中。